AWSTemplateFormatVersion: '2010-09-09'
Description: Sends AWS GuardDuty findings to an SNS Topic and SQS Queue formatted for ingestion in MozDef.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GuardDuty Configuration
        Parameters:
          - MinSeverityLevel
    ParameterLabels:
      MinSeverityLevel:
        default: Minimum severity level (LOW, MED, HIGH)
Parameters:
  MinSeverityLevel:
    Default: LOW
    Description: The minimum findings severity to send to your slack channel (LOW,
      MEDIUM or HIGH)
    Type: String
    AllowedValues:
      - LOW
      - MEDIUM
      - HIGH
Resources:
  GuardDutyToMozDefRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        -
          PolicyName: "allow-sns-topic-publishing"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "sns:Publish"
                Resource: !Ref SnsOutputTopic
  ScheduledRule:
    DependsOn:
      - findingsToMozDef
      - SnsInputTopic
    Type: AWS::Events::Rule
    Properties:
      Description: GuardDutyRule
      State: ENABLED
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      Targets:
        - Arn: !Ref SnsInputTopic
          Id: GuardDutyInputTopic
  SqsOutput:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: guardDuty2MozDef
  SnsOutputTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: guardDuty2MozDef-Output
      Subscription:
        -
          Endpoint:
            Fn::GetAtt:
              - "SqsOutput"
              - "Arn"
          Protocol: "sqs"
      TopicName: guardDuty2MozDef-Output
  SnsInputTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: guardDuty2MozDef-Input
      Subscription:
        -
          Endpoint:
            Fn::GetAtt:
              - "findingsToMozDef"
              - "Arn"
          Protocol: "lambda"
      TopicName: guardDuty2MozDef-Input
  LambdaInvokePermission:
    DependsOn:
      - findingsToMozDef
      - ScheduledRule
      - SnsOutputTopic
      - SnsInputTopic
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !GetAtt 'findingsToMozDef.Arn'
      SourceArn: !GetAtt 'ScheduledRule.Arn'
  findingsToMozDef:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handle
      Role: !GetAtt 'GuardDutyToMozDefRole.Arn'
      Code:
        ZipFile: |
          import boto3
          import json
          import logging

          from datetime import datetime
          from os import getenv

          logger = logging.getLogger(__name__)
          SNS_OUTPUT_TOPIC_ARN = getenv('SNS_OUTPUT_TOPIC_ARN')

          def convert_my_iso_8601(iso_8601):
              assert iso_8601[-1] == 'Z'
              iso_8601 = iso_8601[:-1] + '000'
              iso_8601_dt = datetime.strptime(iso_8601, '%Y-%m-%dT%H:%M:%S.%f')
              return str(iso_8601_dt)

          def send_to_sns(event, sns_client):
              """Send the transformed message to the SNS topic that outputs to another SQS queue."""
              return sns_client.publish(
                  TopicArn=SNS_OUTPUT_TOPIC_ARN,
                  Message=json.dumps(event)
              )

          def _get_resource_info(guardduty_event):
              resource = guardduty_event['detail'].get('resource', {})
              instance_detail = resource.get('instanceDetails', None)
              if instance_detail is not None:
                  return instance_detail.get('instanceId')
              else:
                  return 'guardduty-{account_id}'.format(account_id=event.get('account'))

          def transform_event(event):
              """Take guardDuty SNS notification and turn it into a standard MozDef event."""
              guardduty_event = json.loads(event['Sns']['Message'])
              mozdef_event = {
                  'timestamp': convert_my_iso_8601(event['Sns'].get('Timestamp')),
                  'hostname': _get_resource_info(guardduty_event),
                  'processname': 'guardduty',
                  'processid': 1337,
                  'severity': 'INFO',
                  'summary': guardduty_event.get('title'),
                  'category': guardduty_event.get('type'),
                  'source': 'guardduty',
                  'tags': [
                      guardduty_event['detail']['service']['action']['actionType']
                  ],
                  'details': guardduty_event.get('detail')
              }
              return mozdef_event

          def handle(event, context):
              """Basic lambda handler."""
              sns_client = boto3.client('sns')
              for record in event.get('Records', []):
                  mozdef_event = transform_event(record)
                  res = send_to_sns(mozdef_event, sns_client)
              return mozdef_event
      Environment:
        Variables:
          minSeverityLevel: !Ref 'MinSeverityLevel'
          SNS_OUTPUT_TOPIC_ARN: !Ref SnsOutputTopic
      Runtime: python3.6
      MemorySize: '128'
      Timeout: '10'
      Description: Lambda to push GuardDuty findings to MozDef
      TracingConfig:
        Mode: Active
